# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  password: PasswordState
  role: Role
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  role: RoleWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input UserOrderByInput {
  id: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  password: String
  role: RoleRelateToOneForUpdateInput
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  password: String
  role: RoleRelateToOneForCreateInput
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

type Role {
  id: ID!
  name: String
  canCreateItems: Boolean
  canManageAllItems: Boolean
  canSeeOtherUsers: Boolean
  canEditOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canUseAdminUI: Boolean
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  canCreateItems: BooleanFilter
  canManageAllItems: BooleanFilter
  canSeeOtherUsers: BooleanFilter
  canEditOtherUsers: BooleanFilter
  canManageUsers: BooleanFilter
  canManageRoles: BooleanFilter
  canUseAdminUI: BooleanFilter
  users: UserManyRelationFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canCreateItems: OrderDirection
  canManageAllItems: OrderDirection
  canSeeOtherUsers: OrderDirection
  canEditOtherUsers: OrderDirection
  canManageUsers: OrderDirection
  canManageRoles: OrderDirection
  canUseAdminUI: OrderDirection
}

input RoleUpdateInput {
  name: String
  canCreateItems: Boolean
  canManageAllItems: Boolean
  canSeeOtherUsers: Boolean
  canEditOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canUseAdminUI: Boolean
  users: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  canCreateItems: Boolean
  canManageAllItems: Boolean
  canSeeOtherUsers: Boolean
  canEditOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canUseAdminUI: Boolean
  users: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Product {
  id: ID!
  productTitle: String
  description: String
  productImage: ImageFieldOutput
  productCategory: ProductCategory
  price: Int
  priceUnit: String
  discountPrice: Int
  status: String
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ProductWhereUniqueInput {
  id: ID
  productTitle: String
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  productTitle: StringFilter
  description: StringFilter
  productCategory: ProductCategoryWhereInput
  price: IntFilter
  priceUnit: StringFilter
  discountPrice: IntNullableFilter
  status: StringFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input ProductOrderByInput {
  id: OrderDirection
  productTitle: OrderDirection
  description: OrderDirection
  price: OrderDirection
  priceUnit: OrderDirection
  discountPrice: OrderDirection
  status: OrderDirection
}

input ProductUpdateInput {
  productTitle: String
  description: String
  productImage: ImageFieldInput
  productCategory: ProductCategoryRelateToOneForUpdateInput
  price: Int
  priceUnit: String
  discountPrice: Int
  status: String
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ProductCategoryRelateToOneForUpdateInput {
  create: ProductCategoryCreateInput
  connect: ProductCategoryWhereUniqueInput
  disconnect: Boolean
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  productTitle: String
  description: String
  productImage: ImageFieldInput
  productCategory: ProductCategoryRelateToOneForCreateInput
  price: Int
  priceUnit: String
  discountPrice: Int
  status: String
}

input ProductCategoryRelateToOneForCreateInput {
  create: ProductCategoryCreateInput
  connect: ProductCategoryWhereUniqueInput
}

type ProductCategory {
  id: ID!
  categoryTitle: String
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
}

input ProductCategoryWhereUniqueInput {
  id: ID
  categoryTitle: String
}

input ProductCategoryWhereInput {
  AND: [ProductCategoryWhereInput!]
  OR: [ProductCategoryWhereInput!]
  NOT: [ProductCategoryWhereInput!]
  id: IDFilter
  categoryTitle: StringFilter
  products: ProductManyRelationFilter
}

input ProductManyRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input ProductCategoryOrderByInput {
  id: OrderDirection
  categoryTitle: OrderDirection
}

input ProductCategoryUpdateInput {
  categoryTitle: String
  products: ProductRelateToManyForUpdateInput
}

input ProductRelateToManyForUpdateInput {
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCategoryUpdateArgs {
  where: ProductCategoryWhereUniqueInput!
  data: ProductCategoryUpdateInput!
}

input ProductCategoryCreateInput {
  categoryTitle: String
  products: ProductRelateToManyForCreateInput
}

input ProductRelateToManyForCreateInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

type Project {
  id: ID!
  projectTitle: String
  shortDescription: String
  fullDescription: String
  projectImage: ImageFieldOutput
  date: CalendarDay
  location: String
  icon: JSON
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ProjectWhereUniqueInput {
  id: ID
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IDFilter
  projectTitle: StringFilter
  shortDescription: StringFilter
  fullDescription: StringFilter
  date: CalendarDayFilter
  location: StringFilter
}

input CalendarDayFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayFilter
}

input ProjectOrderByInput {
  id: OrderDirection
  projectTitle: OrderDirection
  shortDescription: OrderDirection
  fullDescription: OrderDirection
  date: OrderDirection
  location: OrderDirection
}

input ProjectUpdateInput {
  projectTitle: String
  shortDescription: String
  fullDescription: String
  projectImage: ImageFieldInput
  date: CalendarDay
  location: String
  icon: JSON
}

input ProjectUpdateArgs {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateInput!
}

input ProjectCreateInput {
  projectTitle: String
  shortDescription: String
  fullDescription: String
  projectImage: ImageFieldInput
  date: CalendarDay
  location: String
  icon: JSON
}

type Review {
  id: ID!
  reviewBy: String
  reviewText: String
  date: CalendarDay
  location: String
}

input ReviewWhereUniqueInput {
  id: ID
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
  id: IDFilter
  reviewBy: StringFilter
  reviewText: StringFilter
  date: CalendarDayFilter
  location: StringFilter
}

input ReviewOrderByInput {
  id: OrderDirection
  reviewBy: OrderDirection
  reviewText: OrderDirection
  date: OrderDirection
  location: OrderDirection
}

input ReviewUpdateInput {
  reviewBy: String
  reviewText: String
  date: CalendarDay
  location: String
}

input ReviewUpdateArgs {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateInput!
}

input ReviewCreateInput {
  reviewBy: String
  reviewText: String
  date: CalendarDay
  location: String
}

type SiteConfig {
  id: ID!
  siteTitle: String
  heroPreamble: SiteConfig_heroPreamble_Document
  heroImage1: ImageFieldOutput
  heroImage2: ImageFieldOutput
  heroImage3: ImageFieldOutput
  heroImage4: ImageFieldOutput
  projectsPreamble: SiteConfig_projectsPreamble_Document
  productsPreamble: SiteConfig_productsPreamble_Document
  reviewsPreamble: SiteConfig_reviewsPreamble_Document
  ourServicesPreamble: SiteConfig_ourServicesPreamble_Document
  ourLocationPreamble: SiteConfig_ourLocationPreamble_Document
}

type SiteConfig_heroPreamble_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type SiteConfig_projectsPreamble_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type SiteConfig_productsPreamble_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type SiteConfig_reviewsPreamble_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type SiteConfig_ourServicesPreamble_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type SiteConfig_ourLocationPreamble_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input SiteConfigWhereUniqueInput {
  id: ID
}

input SiteConfigWhereInput {
  AND: [SiteConfigWhereInput!]
  OR: [SiteConfigWhereInput!]
  NOT: [SiteConfigWhereInput!]
  id: IDFilter
  siteTitle: StringFilter
}

input SiteConfigOrderByInput {
  id: OrderDirection
  siteTitle: OrderDirection
}

input SiteConfigUpdateInput {
  siteTitle: String
  heroPreamble: JSON
  heroImage1: ImageFieldInput
  heroImage2: ImageFieldInput
  heroImage3: ImageFieldInput
  heroImage4: ImageFieldInput
  projectsPreamble: JSON
  productsPreamble: JSON
  reviewsPreamble: JSON
  ourServicesPreamble: JSON
  ourLocationPreamble: JSON
}

input SiteConfigUpdateArgs {
  where: SiteConfigWhereUniqueInput! = {id: 1}
  data: SiteConfigUpdateInput!
}

input SiteConfigCreateInput {
  siteTitle: String
  heroPreamble: JSON
  heroImage1: ImageFieldInput
  heroImage2: ImageFieldInput
  heroImage3: ImageFieldInput
  heroImage4: ImageFieldInput
  projectsPreamble: JSON
  productsPreamble: JSON
  reviewsPreamble: JSON
  ourServicesPreamble: JSON
  ourLocationPreamble: JSON
}

type Order {
  id: ID!
  customerName: String
  customerEmail: String
  orderDetails: JSON
  amount: Int
  paymentId: String
  cardName: String
  createdAt: DateTime
  status: String
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input OrderWhereUniqueInput {
  id: ID
  paymentId: String
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  id: IDFilter
  customerName: StringFilter
  customerEmail: StringFilter
  amount: IntFilter
  paymentId: StringFilter
  cardName: StringFilter
  createdAt: DateTimeNullableFilter
  status: StringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input OrderOrderByInput {
  id: OrderDirection
  customerName: OrderDirection
  customerEmail: OrderDirection
  amount: OrderDirection
  paymentId: OrderDirection
  cardName: OrderDirection
  createdAt: OrderDirection
  status: OrderDirection
}

input OrderUpdateInput {
  customerName: String
  customerEmail: String
  orderDetails: JSON
  amount: Int
  paymentId: String
  cardName: String
  createdAt: DateTime
  status: String
}

input OrderUpdateArgs {
  where: OrderWhereUniqueInput!
  data: OrderUpdateInput!
}

input OrderCreateInput {
  customerName: String
  customerEmail: String
  orderDetails: JSON
  amount: Int
  paymentId: String
  cardName: String
  createdAt: DateTime
  status: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(where: ProductWhereUniqueInput!, data: ProductUpdateInput!): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createProductCategory(data: ProductCategoryCreateInput!): ProductCategory
  createProductCategories(data: [ProductCategoryCreateInput!]!): [ProductCategory]
  updateProductCategory(where: ProductCategoryWhereUniqueInput!, data: ProductCategoryUpdateInput!): ProductCategory
  updateProductCategories(data: [ProductCategoryUpdateArgs!]!): [ProductCategory]
  deleteProductCategory(where: ProductCategoryWhereUniqueInput!): ProductCategory
  deleteProductCategories(where: [ProductCategoryWhereUniqueInput!]!): [ProductCategory]
  createProject(data: ProjectCreateInput!): Project
  createProjects(data: [ProjectCreateInput!]!): [Project]
  updateProject(where: ProjectWhereUniqueInput!, data: ProjectUpdateInput!): Project
  updateProjects(data: [ProjectUpdateArgs!]!): [Project]
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteProjects(where: [ProjectWhereUniqueInput!]!): [Project]
  createReview(data: ReviewCreateInput!): Review
  createReviews(data: [ReviewCreateInput!]!): [Review]
  updateReview(where: ReviewWhereUniqueInput!, data: ReviewUpdateInput!): Review
  updateReviews(data: [ReviewUpdateArgs!]!): [Review]
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteReviews(where: [ReviewWhereUniqueInput!]!): [Review]
  createSiteConfig(data: SiteConfigCreateInput!): SiteConfig
  createSiteConfigs(data: [SiteConfigCreateInput!]!): [SiteConfig]
  updateSiteConfig(where: SiteConfigWhereUniqueInput! = {id: 1}, data: SiteConfigUpdateInput!): SiteConfig
  updateSiteConfigs(data: [SiteConfigUpdateArgs!]!): [SiteConfig]
  deleteSiteConfig(where: SiteConfigWhereUniqueInput! = {id: 1}): SiteConfig
  deleteSiteConfigs(where: [SiteConfigWhereUniqueInput!]!): [SiteConfig]
  createOrder(data: OrderCreateInput!): Order
  createOrders(data: [OrderCreateInput!]!): [Order]
  updateOrder(where: OrderWhereUniqueInput!, data: OrderUpdateInput!): Order
  updateOrders(data: [OrderUpdateArgs!]!): [Order]
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteOrders(where: [OrderWhereUniqueInput!]!): [Order]
  endSession: Boolean!
  authenticateUserWithPassword(name: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  roles(where: RoleWhereInput! = {}, orderBy: [RoleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RoleWhereUniqueInput): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  productCategories(where: ProductCategoryWhereInput! = {}, orderBy: [ProductCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductCategoryWhereUniqueInput): [ProductCategory!]
  productCategory(where: ProductCategoryWhereUniqueInput!): ProductCategory
  productCategoriesCount(where: ProductCategoryWhereInput! = {}): Int
  projects(where: ProjectWhereInput! = {}, orderBy: [ProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectWhereUniqueInput): [Project!]
  project(where: ProjectWhereUniqueInput!): Project
  projectsCount(where: ProjectWhereInput! = {}): Int
  reviews(where: ReviewWhereInput! = {}, orderBy: [ReviewOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReviewWhereUniqueInput): [Review!]
  review(where: ReviewWhereUniqueInput!): Review
  reviewsCount(where: ReviewWhereInput! = {}): Int
  siteConfigs(where: SiteConfigWhereInput! = {id: {equals: 1}}, orderBy: [SiteConfigOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SiteConfigWhereUniqueInput): [SiteConfig!]
  siteConfig(where: SiteConfigWhereUniqueInput! = {id: 1}): SiteConfig
  siteConfigsCount(where: SiteConfigWhereInput! = {id: {equals: 1}}): Int
  orders(where: OrderWhereInput! = {}, orderBy: [OrderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrderWhereUniqueInput): [Order!]
  order(where: OrderWhereUniqueInput!): Order
  ordersCount(where: OrderWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
